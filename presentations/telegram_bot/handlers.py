from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from services.user_service import UserService
from utils.email.confirming_email import send_email
from presentations.telegram_bot.keyboards import *
from utils.security.salt import generate_salt
import asyncio
from services.crypto_service import CryptoService

class Register(StatesGroup):
    nick = State()
    tg_id = State()
    email_reg = State()
    check_email = State()
    active = State()
    reg_started = State()
    waiting = State()

class CoinPrice(StatesGroup):
    ticker = State()

class ComparingPrice(StatesGroup):
    ticker = State()

class ChangeWallet(StatesGroup):
    wallet = State()
    
crypto_service = CryptoService()
router = Router()
bot_user_service = UserService()


@router.message(F.text.upper().in_({"–ì–õ–ê–í–ù–ê–Ø", "MAIN", "–ú–ï–ù–Æ", "/START"}))
async def cmd_start(message: Message):
    await message.answer(
"""–ü—Ä–∏–≤–µ—Ç, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –≤–µ–¥–µ–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞.
–ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é:
1)—Ç—ã –º–æ–∂–µ—à—å –≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–µ–Ω–µ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ –±–∏—Ä–∂–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è\n
2)—Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏". –í –Ω–∏—Ö —è –±—É–¥—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –≤–∞–ª—é—Ç—ã, –∞ —Ç–∞–∫–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Ü–µ–Ω—É, –≤–ø–æ—Å–ª–µ–∂–¥—Å—Ç–≤–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª —Å "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏" –∏ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ —Ü–µ–ª–æ–º
–í–∞–∂–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
–Ø –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–∫–∏–º-–ª–∏–±–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º, –≤—ã–ø–æ–ª–Ω—è—è —Ä–æ–ª—å —É–¥–æ–±–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É –º–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º(–∫—Ä–æ–º–µ –ø–æ—á—Ç—ã –∏ –Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–æ–ª–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º) –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
–ü—Ä–æ—Å—Ç–∏ –∑–∞ –¥–æ–ª–≥–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ) –î–∞–≤–∞–π –∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!""", reply_markup = start_reply_keyboard
                         )



@router.message(F.text.upper() == "–¢–û–ü –ö–†–ò–ü–¢–´")
async def give_top_crypto(message: Message):
    data_dict = await crypto_service.get_top_crypto()
    answer_str = str()
    for key in data_dict:
        answer_str += f"{key} : {data_dict[key]}\n"
    await message.answer(answer_str)
    

@router.message(F.text.upper() == "–ú–û–ô –ö–û–®–ï–õ–ï–ö")
async def get_checkpoints(message: Message):
    print(await bot_user_service.get_checkpoints(tg_id = message.from_user.id))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é. –æ–ø—Ü–∏—é", reply_markup = inline_keyboard_wallet)
    

@router.callback_query(F.data == "check_wallet")
async def check_wallet(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("Wallet checked")
    


@router.callback_query(F.data == "change_wallet")
async def change_wallet(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with asyncio.TaskGroup() as tg:
        tg.create_task(state.set_state(ChangeWallet.wallet))
        tg.create_task(await callback.message.answer("""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫,—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:
BTC:1
ETH:10"""))


@router.message(ChangeWallet.wallet)
async def change_wallet_data(message: Message, state: FSMContext):
    
    data = message.text
    data_dict = {}
    for string in data.split("\n"):
          string = string.split(":")
          data_dict[string[0]] = string[1]
    async with asyncio.TaskGroup() as tg:
        tg.create_task(bot_user_service.change_wallet(tg_id = message.from_user.id, data = data_dict))
        tg.create_task(await message.answer("–ö–æ—à–µ–ª–µ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"))
        tg.create_task(state.clear())
    

@router.message(F.text.upper() == "–ê–†–ë–ò–¢–†–ê–ñ –î–õ–Ø –û–î–ù–û–ô –í–ê–õ–Æ–¢–´")
async def compare_price_specific_crypto_ticker(message: Message, state: FSMContext):
    if await bot_user_service.check_active(tg_id= str(message.from_user.id)):
        async with asyncio.TaskGroup() as tg:
            tg.create_task(state.set_state(ComparingPrice.ticker))
            tg.create_task(await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–∫–µ—Ä(—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) –Ω—É–∂–Ω–æ–π –≤–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã(–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)"))
    else:
        return await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø—Ä–µ–∂–¥–µ, —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")

@router.message(ComparingPrice.ticker)
async def compare_price_specific_crypto(message: Message, state: FSMContext):
    async with asyncio.TaskGroup() as tg:
        crypto = await crypto_service.compare_price_specific_crypto(ticker = message.text)
        tg.create_task(await message.answer(f"–°–∞–º–∞—è –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ = {round(float(crypto[0][1]), 5)}$ (USD), —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ = {round(float(crypto[-1][1]), 5)}$ (USD), –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞ = {round(float(crypto[0][1]) - float(crypto[-1][1]), 5)}$ (USD)"))
        tg.create_task(state.clear())
    
    
@router.message(F.text.upper() == "–¶–ï–ù–ê –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´")
async def get_price_specific_crypto_ticker(message: Message, state: FSMContext):
    await state.set_state(CoinPrice.ticker)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–∫–µ—Ä(—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) –Ω—É–∂–Ω–æ–π –≤–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã(–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)")


@router.message(CoinPrice.ticker)
async def get_price_specific_crypto(message: Message, state: FSMContext):
    price = await crypto_service.get_specific_crypto(ticker = message.text)
    await message.answer(str(round(float(price["binance"]), 5)) + "$ (USD)")
    await state.clear()
    
    
    
@router.message(Command('help'))
async def cmd_help(message: Message):
    async with asyncio.TaskGroup() as tg:
        tg.create_task(message.answer("–¢–∞–∫, —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å! –Ø —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–ª, —Ç–∞–∫ —á—Ç–æ –ø–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"))

     
@router.message(F.text.upper().in_({"–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", "–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø", "/REGISTER", "REGISTER"}))
async def register(message:Message, state: FSMContext):
    async with asyncio.TaskGroup() as tg:
        data = await state.get_data()
        try:
            if data["active"] == "True":
                tg.create_task(message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"))
        except Exception:     
            tg.create_task(state.set_state(Register.nick))
            tg.create_task(state.update_data(tg_id  = str(message.from_user.id)))
            await message.answer("–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")


@router.message(Register.nick)
async def reg_email(message: Message, state: FSMContext):
    async with asyncio.TaskGroup() as tg:
        tg.create_task(state.update_data(nick = message.text))
        tg.create_task(state.set_state(Register.email_reg))
        await message.answer(
"""–£–¥–æ–±–Ω–∞—è —Ç–µ–±–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—á—Ç–∞
–û–±—Ä–∞–∑–µ—Ü: my_email@gmail.com"""
    )
    
    

@router.message(Register.email_reg)
async def reg_password(message: Message, state: FSMContext):
    async with asyncio.TaskGroup() as tg:
        await state.update_data(reg_email = message.text)
        data = await state.get_data()
        gen_salt = generate_salt()
        await bot_user_service.put_user(email = data["reg_email"], nick = data["nick"], tg_id = data["tg_id"], salt = gen_salt)
        if str(await tg.create_task(send_email(getter = message.text, salt = gen_salt))) == "Message was not sent":
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
            tg.create_task(state.clear())
        else:
            await message.answer("–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É")
            tg.create_task(state.set_state(Register.waiting))
    

@router.message(Register.waiting)
async def start_function(message:Message, state:FSMContext):
    async with asyncio.TaskGroup() as tg:
        data = await state.get_data()
        salt = message.text
        if salt == await bot_user_service.get_salt(tg_id = data["tg_id"]):
            tg.create_task(bot_user_service.activate_user(tg_id = data["tg_id"]))
            tg.create_task(state.update_data(active = "True"))
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üéâ")
        else:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ")
        tg.create_task(state.clear())